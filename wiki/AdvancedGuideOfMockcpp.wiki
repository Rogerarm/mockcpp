==1. Default behavior==

Default behavior is defined by using _*defaults()*_, instead of _*expects()/stubs()*_. Relations between _*defaults()*_ and _*expects()/stubs()*_ could be thought as relations between *default* and *case* in C/C++ *switch* sentences. If all mock specifications of a method of a mock object specified with _*expects()/stubs()*_ don't match one of your invocations to the method in question, the specification defined with _*defaults()*_ (if have any) will be used to perform the return behavior. 

This is a very useful feature. It helps you write your tests in a neater way.  

{{{

struct TestCaseInfoReadder
{
      virtual const std::string& getCaseName() const = 0;
      virtual const std::string& getFixtureName() const = 0;

      virtual ~TestCaseInfoReadder() {}
};

class TestGeneralTestFilter: public CxxTest::TestSuite
{
      MockObject<TestCaseInfoReader> testcase;

      GeneralTestFilter* filter;

public:

      void setUp()
      {
            filter = new GeneralTestFilter("*TestFixture", "testcase?");

            testcase.METHOD(TestCaseInfoReader::getCaseName)
                            .defaults().will(returnValue("testcase1"));

            testcase.METHOD(TestCaseInfoReader::getFixtureName)
                            .defaults().will(returnValue("FooTestFixture"));
      }

     void tearDown()
     {
           testcase.reset();

           delete filter;
     }

     void test_should_be_able_to_recoginize_matched_fixture()
     {
          TS_ASSERT_TRUE(filter->matches(testcase));
     }

     void test_should_tell_unmatched_if_test_fixture_name_does_not_match()
     {
          fixture.METHOD(TestFixtureInfoReader::getFixtureName)
             .stubs().will(returnValue("FooFixture"));

          TS_ASSERT_FALSE(filter->matches(testcase));
     }

     void test_should_tell_unmatched_if_testcase_name_does_not_match()
     {
          fixture.METHOD(TestFixtureInfoReader::getCaseName)
             .stubs().will(returnValue("testcase10"));

          TS_ASSERT_FALSE(filter->matches(testcase));
     }
};

}}}

In this example, the default behaviors of method getFixtureName() and getCaseName() are return matched names. So the first test case is to test the happy path. Pretty simple, you only need to write one assertion to test the class *`TestFilter`*. The latter 2 test cases test the unmatched cases, so in each test case the *stubs()* is used to "HIDE" the default behavior in order to do exceptional tests.

Furthermore, for one method, you can specify more than one default behavior, distinguished by _*with()*_ selectors. When falling in default category, mockcpp will try to select a matched default behavior. If multiple default behaviors match your invocation, the first one will be selected. In current implementation, the first matched one defined in a test is the one is chosen by mockcpp, but this might change in later version, so don't make your tests rely on this, instead, you should make your default specification distinguiable.

{{{

struct TestFilter
{
      virtual bool matches(TestCaseInfoReader* ) const = 0;

      virtual ~TestFilter() {}
};

struct TestCase : public TestCaseInfoReader
{
      virtual void run() throw (AssertionFailure) = 0;

      virtual ~TestCase() {}
};

class TestTestCaseRunner: public CxxTest::TestSuite
{
      MockObject<TestFilter> filter;
      MockObject<TestCase> testcase;

      TestRunner* runner;

public:
      void setUp()
      {
            runner = new SandboxTestRunner();

            filter.METHOD(TestFilter::matches)
                    .defaults()
                    .with(eq((TestCase*)testcase)
                    .will(returnValue(true));

            filter.METHOD(TestFilter::matches)
                    .defaults()
                    .with(neq((TestCase*)testcase)
                    .will(returnValue(false));
      }

     void tearDown()
     {
           filter.reset();
           testcase.reset();

           delete runner;
     }

     void test_should_run_matched_test_case()
     {
           testcase.METHOD(TestCase::run).expects(once());

           runner->run(testcase, filter);

           testcase.verify();
     }

     void test_should_not_run_unmatched_test_case()
     {
          MockObject<TestCase> unmatchedTestCase;
         
          unmatchedTestCase.METHOD(TestCase::run)
                  .expects(never());

           runner->run(unmatchedTestCase, filter);

           unmatchedTestCase.verify();
     }

     void test_should_throw_an_AsstionFailure_exception_if_the_test_case_did_that()
     {
           testcase.METHOD(TestCase::run)
                 .stubs().will(throws(AssertionFailure("AssertionFailure"));

           TS_ASSERT_THROWS(runner->run(testcase, filter), AssertionFailure);
     }

     void test_should_throw_a_CrashException_if_the_test_case_crashed()
     {
           testcase.METHOD(TestCase::run)
                 .stubs().will(die());

           TS_ASSERT_THROWS(runner->run(testcase, filter), CrashException);
     }
};

}}}

In this example, we used *defaults()* to specify the matched test case and unmatched test cases. It helps us to focus on the aspects which we intent to test in later test cases.


==2. Lifecycle Management==